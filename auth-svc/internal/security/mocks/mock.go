// Code generated by MockGen. DO NOT EDIT.
// Source: helper.go

// Package mock_security is a generated GoMock package.
package mock_security

import (
	reflect "reflect"

	domain "github.com/cloud9cloud9/go-grpc-todo/auth-svc/internal/domain"
	security "github.com/cloud9cloud9/go-grpc-todo/auth-svc/internal/security"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthHelper is a mock of AuthHelper interface.
type MockAuthHelper struct {
	ctrl     *gomock.Controller
	recorder *MockAuthHelperMockRecorder
}

// MockAuthHelperMockRecorder is the mock recorder for MockAuthHelper.
type MockAuthHelperMockRecorder struct {
	mock *MockAuthHelper
}

// NewMockAuthHelper creates a new mock instance.
func NewMockAuthHelper(ctrl *gomock.Controller) *MockAuthHelper {
	mock := &MockAuthHelper{ctrl: ctrl}
	mock.recorder = &MockAuthHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthHelper) EXPECT() *MockAuthHelperMockRecorder {
	return m.recorder
}

// CompareHashAndPassword mocks base method.
func (m *MockAuthHelper) CompareHashAndPassword(hashedPass string, password []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareHashAndPassword", hashedPass, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CompareHashAndPassword indicates an expected call of CompareHashAndPassword.
func (mr *MockAuthHelperMockRecorder) CompareHashAndPassword(hashedPass, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareHashAndPassword", reflect.TypeOf((*MockAuthHelper)(nil).CompareHashAndPassword), hashedPass, password)
}

// GenerateToken mocks base method.
func (m *MockAuthHelper) GenerateToken(user *domain.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthHelperMockRecorder) GenerateToken(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthHelper)(nil).GenerateToken), user)
}

// HashPassword mocks base method.
func (m *MockAuthHelper) HashPassword(password string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	return ret0
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockAuthHelperMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockAuthHelper)(nil).HashPassword), password)
}

// ValidateToken mocks base method.
func (m *MockAuthHelper) ValidateToken(token string) (*security.TokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", token)
	ret0, _ := ret[0].(*security.TokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthHelperMockRecorder) ValidateToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthHelper)(nil).ValidateToken), token)
}
