// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: internal/pb/todo.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TodoService_CreateTodoList_FullMethodName  = "/todo.TodoService/CreateTodoList"
	TodoService_GetTodoListById_FullMethodName = "/todo.TodoService/GetTodoListById"
	TodoService_GetTodoLists_FullMethodName    = "/todo.TodoService/GetTodoLists"
	TodoService_UpdateTodoList_FullMethodName  = "/todo.TodoService/UpdateTodoList"
	TodoService_DeleteTodoList_FullMethodName  = "/todo.TodoService/DeleteTodoList"
	TodoService_CreateTodoItem_FullMethodName  = "/todo.TodoService/CreateTodoItem"
	TodoService_GetTodoItemById_FullMethodName = "/todo.TodoService/GetTodoItemById"
	TodoService_GetTodoItems_FullMethodName    = "/todo.TodoService/GetTodoItems"
	TodoService_UpdateTodoItem_FullMethodName  = "/todo.TodoService/UpdateTodoItem"
	TodoService_DeleteTodoItem_FullMethodName  = "/todo.TodoService/DeleteTodoItem"
)

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	CreateTodoList(ctx context.Context, in *CreateTodoListRequest, opts ...grpc.CallOption) (*CreateTodoListResponse, error)
	GetTodoListById(ctx context.Context, in *GetTodoListRequest, opts ...grpc.CallOption) (*GetTodoListResponse, error)
	GetTodoLists(ctx context.Context, in *GetTodoListsRequest, opts ...grpc.CallOption) (*GetTodoListsResponse, error)
	UpdateTodoList(ctx context.Context, in *UpdateTodoListRequest, opts ...grpc.CallOption) (*UpdateTodoListResponse, error)
	DeleteTodoList(ctx context.Context, in *DeleteTodoListRequest, opts ...grpc.CallOption) (*DeleteTodoListResponse, error)
	CreateTodoItem(ctx context.Context, in *CreateTodoItemRequest, opts ...grpc.CallOption) (*CreateTodoItemResponse, error)
	GetTodoItemById(ctx context.Context, in *GetTodoItemRequest, opts ...grpc.CallOption) (*GetTodoItemResponse, error)
	GetTodoItems(ctx context.Context, in *GetTodoItemsRequest, opts ...grpc.CallOption) (*GetTodoItemsResponse, error)
	UpdateTodoItem(ctx context.Context, in *UpdateTodoItemRequest, opts ...grpc.CallOption) (*UpdateTodoItemResponse, error)
	DeleteTodoItem(ctx context.Context, in *DeleteTodoItemRequest, opts ...grpc.CallOption) (*DeleteTodoItemResponse, error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) CreateTodoList(ctx context.Context, in *CreateTodoListRequest, opts ...grpc.CallOption) (*CreateTodoListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTodoListResponse)
	err := c.cc.Invoke(ctx, TodoService_CreateTodoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetTodoListById(ctx context.Context, in *GetTodoListRequest, opts ...grpc.CallOption) (*GetTodoListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTodoListResponse)
	err := c.cc.Invoke(ctx, TodoService_GetTodoListById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetTodoLists(ctx context.Context, in *GetTodoListsRequest, opts ...grpc.CallOption) (*GetTodoListsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTodoListsResponse)
	err := c.cc.Invoke(ctx, TodoService_GetTodoLists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) UpdateTodoList(ctx context.Context, in *UpdateTodoListRequest, opts ...grpc.CallOption) (*UpdateTodoListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTodoListResponse)
	err := c.cc.Invoke(ctx, TodoService_UpdateTodoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) DeleteTodoList(ctx context.Context, in *DeleteTodoListRequest, opts ...grpc.CallOption) (*DeleteTodoListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTodoListResponse)
	err := c.cc.Invoke(ctx, TodoService_DeleteTodoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) CreateTodoItem(ctx context.Context, in *CreateTodoItemRequest, opts ...grpc.CallOption) (*CreateTodoItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTodoItemResponse)
	err := c.cc.Invoke(ctx, TodoService_CreateTodoItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetTodoItemById(ctx context.Context, in *GetTodoItemRequest, opts ...grpc.CallOption) (*GetTodoItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTodoItemResponse)
	err := c.cc.Invoke(ctx, TodoService_GetTodoItemById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetTodoItems(ctx context.Context, in *GetTodoItemsRequest, opts ...grpc.CallOption) (*GetTodoItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTodoItemsResponse)
	err := c.cc.Invoke(ctx, TodoService_GetTodoItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) UpdateTodoItem(ctx context.Context, in *UpdateTodoItemRequest, opts ...grpc.CallOption) (*UpdateTodoItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTodoItemResponse)
	err := c.cc.Invoke(ctx, TodoService_UpdateTodoItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) DeleteTodoItem(ctx context.Context, in *DeleteTodoItemRequest, opts ...grpc.CallOption) (*DeleteTodoItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTodoItemResponse)
	err := c.cc.Invoke(ctx, TodoService_DeleteTodoItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoServiceServer is the server API for TodoService service.
// All implementations must embed UnimplementedTodoServiceServer
// for forward compatibility.
type TodoServiceServer interface {
	CreateTodoList(context.Context, *CreateTodoListRequest) (*CreateTodoListResponse, error)
	GetTodoListById(context.Context, *GetTodoListRequest) (*GetTodoListResponse, error)
	GetTodoLists(context.Context, *GetTodoListsRequest) (*GetTodoListsResponse, error)
	UpdateTodoList(context.Context, *UpdateTodoListRequest) (*UpdateTodoListResponse, error)
	DeleteTodoList(context.Context, *DeleteTodoListRequest) (*DeleteTodoListResponse, error)
	CreateTodoItem(context.Context, *CreateTodoItemRequest) (*CreateTodoItemResponse, error)
	GetTodoItemById(context.Context, *GetTodoItemRequest) (*GetTodoItemResponse, error)
	GetTodoItems(context.Context, *GetTodoItemsRequest) (*GetTodoItemsResponse, error)
	UpdateTodoItem(context.Context, *UpdateTodoItemRequest) (*UpdateTodoItemResponse, error)
	DeleteTodoItem(context.Context, *DeleteTodoItemRequest) (*DeleteTodoItemResponse, error)
	mustEmbedUnimplementedTodoServiceServer()
}

// UnimplementedTodoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTodoServiceServer struct{}

func (UnimplementedTodoServiceServer) CreateTodoList(context.Context, *CreateTodoListRequest) (*CreateTodoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodoList not implemented")
}
func (UnimplementedTodoServiceServer) GetTodoListById(context.Context, *GetTodoListRequest) (*GetTodoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoListById not implemented")
}
func (UnimplementedTodoServiceServer) GetTodoLists(context.Context, *GetTodoListsRequest) (*GetTodoListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoLists not implemented")
}
func (UnimplementedTodoServiceServer) UpdateTodoList(context.Context, *UpdateTodoListRequest) (*UpdateTodoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodoList not implemented")
}
func (UnimplementedTodoServiceServer) DeleteTodoList(context.Context, *DeleteTodoListRequest) (*DeleteTodoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodoList not implemented")
}
func (UnimplementedTodoServiceServer) CreateTodoItem(context.Context, *CreateTodoItemRequest) (*CreateTodoItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodoItem not implemented")
}
func (UnimplementedTodoServiceServer) GetTodoItemById(context.Context, *GetTodoItemRequest) (*GetTodoItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoItemById not implemented")
}
func (UnimplementedTodoServiceServer) GetTodoItems(context.Context, *GetTodoItemsRequest) (*GetTodoItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoItems not implemented")
}
func (UnimplementedTodoServiceServer) UpdateTodoItem(context.Context, *UpdateTodoItemRequest) (*UpdateTodoItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodoItem not implemented")
}
func (UnimplementedTodoServiceServer) DeleteTodoItem(context.Context, *DeleteTodoItemRequest) (*DeleteTodoItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodoItem not implemented")
}
func (UnimplementedTodoServiceServer) mustEmbedUnimplementedTodoServiceServer() {}
func (UnimplementedTodoServiceServer) testEmbeddedByValue()                     {}

// UnsafeTodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServiceServer will
// result in compilation errors.
type UnsafeTodoServiceServer interface {
	mustEmbedUnimplementedTodoServiceServer()
}

func RegisterTodoServiceServer(s grpc.ServiceRegistrar, srv TodoServiceServer) {
	// If the following call pancis, it indicates UnimplementedTodoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TodoService_ServiceDesc, srv)
}

func _TodoService_CreateTodoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).CreateTodoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_CreateTodoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).CreateTodoList(ctx, req.(*CreateTodoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetTodoListById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetTodoListById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_GetTodoListById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetTodoListById(ctx, req.(*GetTodoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetTodoLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodoListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetTodoLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_GetTodoLists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetTodoLists(ctx, req.(*GetTodoListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_UpdateTodoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).UpdateTodoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_UpdateTodoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).UpdateTodoList(ctx, req.(*UpdateTodoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_DeleteTodoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).DeleteTodoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_DeleteTodoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).DeleteTodoList(ctx, req.(*DeleteTodoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_CreateTodoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).CreateTodoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_CreateTodoItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).CreateTodoItem(ctx, req.(*CreateTodoItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetTodoItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodoItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetTodoItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_GetTodoItemById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetTodoItemById(ctx, req.(*GetTodoItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetTodoItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodoItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetTodoItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_GetTodoItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetTodoItems(ctx, req.(*GetTodoItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_UpdateTodoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodoItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).UpdateTodoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_UpdateTodoItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).UpdateTodoItem(ctx, req.(*UpdateTodoItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_DeleteTodoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodoItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).DeleteTodoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_DeleteTodoItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).DeleteTodoItem(ctx, req.(*DeleteTodoItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoService_ServiceDesc is the grpc.ServiceDesc for TodoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todo.TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTodoList",
			Handler:    _TodoService_CreateTodoList_Handler,
		},
		{
			MethodName: "GetTodoListById",
			Handler:    _TodoService_GetTodoListById_Handler,
		},
		{
			MethodName: "GetTodoLists",
			Handler:    _TodoService_GetTodoLists_Handler,
		},
		{
			MethodName: "UpdateTodoList",
			Handler:    _TodoService_UpdateTodoList_Handler,
		},
		{
			MethodName: "DeleteTodoList",
			Handler:    _TodoService_DeleteTodoList_Handler,
		},
		{
			MethodName: "CreateTodoItem",
			Handler:    _TodoService_CreateTodoItem_Handler,
		},
		{
			MethodName: "GetTodoItemById",
			Handler:    _TodoService_GetTodoItemById_Handler,
		},
		{
			MethodName: "GetTodoItems",
			Handler:    _TodoService_GetTodoItems_Handler,
		},
		{
			MethodName: "UpdateTodoItem",
			Handler:    _TodoService_UpdateTodoItem_Handler,
		},
		{
			MethodName: "DeleteTodoItem",
			Handler:    _TodoService_DeleteTodoItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/pb/todo.proto",
}
